" ======================= GENERAL CONFIGURATION =======================
" Vim apparently needs a more POSIX-compliant shell for some stuff
" So if fish is our shell, switch it out for sh
if &shell =~# 'fish$'
    set shell=sh
endif

" Enable mouse mode
set mouse=a

" marker folds
set foldmethod=syntax
set foldnestmax=2

" Keep status to show airline, set fonts
set laststatus=2
let g:airline_powerline_fonts = 1

" Enable scrollback and open NERDTree if we're in a full-sized terminal
if winheight('%') >=? 35
"     autocmd VimEnter * NERDTree
"     autocmd VimEnter * wincmd p
"     autocmd BufWinEnter * NERDTreeMirror
"     autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
    set scrolloff=10
endif

if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


" Thin cursor in insert mode
let &t_SI = "\<esc>[5 q"  " blinking I-beam in insert mode
let &t_SR = "\<esc>[3 q"  " blinking underline in replace mode
let &t_EI = "\<esc>[ q"  " default cursor (usually blinking block) otherwise

" move splits with alt+direction
tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l
inoremap <A-h> <C-\><C-N><C-w>h
inoremap <A-j> <C-\><C-N><C-w>j
inoremap <A-k> <C-\><C-N><C-w>k
inoremap <A-l> <C-\><C-N><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

" make esc work in terminal
tnoremap <Esc> <C-\><C-n>

" keep selection when messing with indents
vmap > >gv
vmap < <gv

" Misc stuff
inoremap jj <esc>
filetype plugin indent on
set tabstop=4
set softtabstop=4
set shiftwidth=4
set textwidth=85
set expandtab
set smartindent
set number
set visualbell
set splitbelow

map <Leader>y "+y
map <Leader>p "+p


" ======================= VIM-PLUG PLUGIN STUFF =======================
call plug#begin('~/.vim/plugged')

    Plug 'lervag/vimtex'
    Plug 'harenome/vim-mipssyntax'
    Plug 'dag/vim-fish'
    Plug 'sirver/ultisnips'
    Plug 'daeyun/vim-matlab'
    Plug 'joshdick/onedark.vim'
"    Plug 'Yggdroot/indentLine'
    Plug 'vim-airline/vim-airline'
    Plug 'sheerun/vim-polyglot'
    Plug 'cespare/vim-toml', { 'branch': 'main' }
    Plug 'dkarter/bullets.vim'
    Plug 'glapa-grossklag/elsa.vim'

    Plug 'justinmk/vim-sneak'

    if has('nvim')
        Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.1' }
        Plug 'neoclide/coc.nvim', {'branch': 'release'}
        Plug 'jackguo380/vim-lsp-cxx-highlight'
        Plug 'nvim-lua/plenary.nvim'
        Plug 'lewis6991/gitsigns.nvim'
        Plug 'kyazdani42/nvim-web-devicons'
        Plug 'akinsho/bufferline.nvim'
        Plug 'nvim-tree/nvim-tree.lua'
        Plug 'windwp/nvim-autopairs'       
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  
        Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh', 'branch': 'devel' }
        Plug 'anuvyklack/pretty-fold.nvim'
        Plug 'Pocco81/auto-save.nvim'
        Plug 'lukas-reineke/indent-blankline.nvim'
    endif

call plug#end()

" ======================= PLUGIN-SPECIFIC CONFIGURATION =======================

" telescope configuration
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

" nvim blankline pretty

" load lua plugins
lua << EOF

-- nvim-blankline setup stuff -- make lines pretty
vim.opt.termguicolors = true
vim.cmd [[highlight IndentBlanklineIndent1 guifg=#E06C75 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent2 guifg=#E5C07B gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent3 guifg=#98C379 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent4 guifg=#56B6C2 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent5 guifg=#61AFEF gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent6 guifg=#C678DD gui=nocombine]]
vim.opt.list = true
vim.opt.listchars:append "space:⋅"
-- vim.opt.listchars:append "eol:↴"


require("nvim-tree").setup {}
require("nvim-autopairs").setup {}
require("pretty-fold").setup()
require("auto-save").setup()
require("indent_blankline").setup {
    -- show_current_context = true,
    -- show_current_context_start = true,
    show_end_of_line = true,
    space_char_blankline = " ",
    char_highlight_list = {
        "IndentBlanklineIndent1",
        "IndentBlanklineIndent2",
        "IndentBlanklineIndent3",
        "IndentBlanklineIndent4",
        "IndentBlanklineIndent5",
        "IndentBlanklineIndent6",
    },
}
require("gitsigns").setup()
require("bufferline").setup {
    options = {
        -- mode = "tabs",
        indicator = { style = 'underline' },
        diagnostics = "coc",
        offsets = {
            {
                    filetype = "NvimTree",
                    text = "File Explorer",
                    text_align = "center",
                    separator = true
            }
        }
    }
}

require("nvim-treesitter").setup {
  -- A list of parser names, or "all"
  ensure_installed = { "c", "lua", "rust" },

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = true,

  -- List of parsers to ignore installing (for "all")

  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
  -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be disabled
    -- disable = { "c", "rust" },
    -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
    disable = function(lang, buf)
        local max_filesize = 100 * 1024 -- 100 KB
        local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
        if ok and stats and stats.size > max_filesize then
            return true
        end
    end,

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF

" NVIM tree stuff
" 
nnoremap <Leader>tt :NvimTreeToggle<cr>
let g:lua_tree_auto_close     = 1
let g:lua_tree_follow         = 1
let g:lua_tree_indent_markers = 1


" --- coc.nvim configuration ---
set updatetime=300
set signcolumn=yes
" use tab for completion navigation
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)


" K shows documentation in popup
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction


set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Run code lens action
nmap <leader>cl  <Plug>(coc-codelens-action)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)


" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>d  :CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

""" --- end coc.nvim ---

" bufferline shortcuts

nnoremap <silent> gb :BufferLinePick<CR>


" UltiSnips configuration
" let g:UltiSnipsEditSplit="vertical"
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" Bullets.vim
let g:bullets_enabled_file_types = [
    \ 'markdown',
    \ 'text',
    \ 'gitcommit',
    \ 'scratch'
    \]
" Vimtex configuration
let g:tex_flavor = 'latex'
let g:vimtex_view_method = 'mupdf'
let g:vimtex_quickfix_mode=0
let g:vimtex_compiler_latexmk = {
            \ 'build_dir' : 'build',
            \}
set conceallevel=2


" Markdown configuration
let vim_markdown_preview_github=1


" save folds
augroup remember_folds
  autocmd!
  au BufWinLeave ?* mkview 1
  au BufWinEnter ?* silent! loadview 1
augroup END


" Latex QOL stuff
autocmd Filetype tex inoremap <bar><bar>  <C-o>:w<CR>
" autocmd Filetype tex let b:AutoPairs = AutoPairsDefine({'$' : '$', '\\\[' : '\\\]'})
autocmd Filetype tex noremap <Bslash><Bslash> <Esc>:w<CR>
autocmd Filetype tex set concealcursor-=n
autocmd Filetype tex VimtexCompile

" enable 24 bit color for theme
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif
let g:onedark_terminal_italics=1
syntax on
colorscheme onedark
" hi Normal guibg=NONE ctermbg=NONE
